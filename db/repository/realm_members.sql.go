// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: realm_members.sql

package db

import (
	"context"
	"database/sql"
)

const createRealmMember = `-- name: CreateRealmMember :exec
INSERT INTO realm_members (
    rm_id,
    realm_id,
    status,
    private_money
) VALUES (
    $1, $2, $3, $4
)
`

type CreateRealmMemberParams struct {
	RmID         int64         `json:"rm_id"`
	RealmID      sql.NullInt64 `json:"realm_id"`
	Status       string        `json:"status"`
	PrivateMoney int32         `json:"private_money"`
}

func (q *Queries) CreateRealmMember(ctx context.Context, arg *CreateRealmMemberParams) error {
	_, err := q.db.ExecContext(ctx, createRealmMember,
		arg.RmID,
		arg.RealmID,
		arg.Status,
		arg.PrivateMoney,
	)
	return err
}

const findFullRealmMember = `-- name: FindFullRealmMember :one
SELECT rm.rm_id, rm.realm_id, rm.status, rm.private_money, rm.created_at, ma.rm_id, ma.create_unit, ma.reinforce_unit, ma.move_unit, ma.attack_unit, ma.private_troops, ma.census, ma.created_at 
FROM realm_members AS RM
INNER JOIN member_authorities AS MA
ON RM.rm_id = MA.rm_id
WHERE RM.rm_id = $1 LIMIT 1
`

type FindFullRealmMemberRow struct {
	RealmMember     RealmMember     `json:"realm_member"`
	MemberAuthority MemberAuthority `json:"member_authority"`
}

func (q *Queries) FindFullRealmMember(ctx context.Context, rmID int64) (*FindFullRealmMemberRow, error) {
	row := q.db.QueryRowContext(ctx, findFullRealmMember, rmID)
	var i FindFullRealmMemberRow
	err := row.Scan(
		&i.RealmMember.RmID,
		&i.RealmMember.RealmID,
		&i.RealmMember.Status,
		&i.RealmMember.PrivateMoney,
		&i.RealmMember.CreatedAt,
		&i.MemberAuthority.RmID,
		&i.MemberAuthority.CreateUnit,
		&i.MemberAuthority.ReinforceUnit,
		&i.MemberAuthority.MoveUnit,
		&i.MemberAuthority.AttackUnit,
		&i.MemberAuthority.PrivateTroops,
		&i.MemberAuthority.Census,
		&i.MemberAuthority.CreatedAt,
	)
	return &i, err
}

const findRealmMember = `-- name: FindRealmMember :one
SELECT rm_id, realm_id, status, private_money, created_at FROM realm_members
WHERE rm_id = $1 LIMIT 1
`

func (q *Queries) FindRealmMember(ctx context.Context, rmID int64) (*RealmMember, error) {
	row := q.db.QueryRowContext(ctx, findRealmMember, rmID)
	var i RealmMember
	err := row.Scan(
		&i.RmID,
		&i.RealmID,
		&i.Status,
		&i.PrivateMoney,
		&i.CreatedAt,
	)
	return &i, err
}

const updateRealmMember = `-- name: UpdateRealmMember :exec
UPDATE realm_members
SET realm_id = $2,
status = $3,
private_money = $4
WHERE rm_id = $1
`

type UpdateRealmMemberParams struct {
	RmID         int64         `json:"rm_id"`
	RealmID      sql.NullInt64 `json:"realm_id"`
	Status       string        `json:"status"`
	PrivateMoney int32         `json:"private_money"`
}

func (q *Queries) UpdateRealmMember(ctx context.Context, arg *UpdateRealmMemberParams) error {
	_, err := q.db.ExecContext(ctx, updateRealmMember,
		arg.RmID,
		arg.RealmID,
		arg.Status,
		arg.PrivateMoney,
	)
	return err
}
