// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: realm_members.sql

package db

import (
	"context"
	"database/sql"
)

const createRealmMember = `-- name: CreateRealmMember :exec
INSERT INTO realm_members (
    user_id,
    status,
    private_money
) VALUES (
    $1, $2, $3
)
`

type CreateRealmMemberParams struct {
	UserID       int64  `json:"user_id"`
	Status       string `json:"status"`
	PrivateMoney int32  `json:"private_money"`
}

func (q *Queries) CreateRealmMember(ctx context.Context, arg *CreateRealmMemberParams) error {
	_, err := q.db.ExecContext(ctx, createRealmMember, arg.UserID, arg.Status, arg.PrivateMoney)
	return err
}

const getRealmIdByUserId = `-- name: GetRealmIdByUserId :one
SELECT R.realm_id FROM realm_members AS RM
LEFT JOIN realms as R
ON RM.user_id = R.owner_id
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetRealmIdByUserId(ctx context.Context, userID int64) (sql.NullInt64, error) {
	row := q.db.QueryRowContext(ctx, getRealmIdByUserId, userID)
	var realm_id sql.NullInt64
	err := row.Scan(&realm_id)
	return realm_id, err
}
