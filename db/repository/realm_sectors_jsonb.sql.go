// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: realm_sectors_jsonb.sql

package db

import (
	"context"
	"encoding/json"
)

const addRealmSectorJsonb = `-- name: AddRealmSectorJsonb :exec
UPDATE realm_sectors_jsonb
SET cells_jsonb = jsonb_set(
  cells_jsonb,
  $1,  -- 키의 경로
  to_jsonb($2::int)  -- 새로운 요소 추가
) WHERE realm_sectors_jsonb_id = $3::bigint
`

type AddRealmSectorJsonbParams struct {
	Key     interface{} `json:"key"`
	Value   int32       `json:"value"`
	RealmID int64       `json:"realm_id"`
}

func (q *Queries) AddRealmSectorJsonb(ctx context.Context, arg *AddRealmSectorJsonbParams) error {
	_, err := q.db.ExecContext(ctx, addRealmSectorJsonb, arg.Key, arg.Value, arg.RealmID)
	return err
}

const createRealmSectorsJsonb = `-- name: CreateRealmSectorsJsonb :exec
INSERT INTO realm_sectors_jsonb (
    realm_sectors_jsonb_id, cells_jsonb
) VALUES (
    $1, $2
)
`

type CreateRealmSectorsJsonbParams struct {
	RealmSectorsJsonbID int64           `json:"realm_sectors_jsonb_id"`
	CellsJsonb          json.RawMessage `json:"cells_jsonb"`
}

func (q *Queries) CreateRealmSectorsJsonb(ctx context.Context, arg *CreateRealmSectorsJsonbParams) error {
	_, err := q.db.ExecContext(ctx, createRealmSectorsJsonb, arg.RealmSectorsJsonbID, arg.CellsJsonb)
	return err
}

const findBothJsonb = `-- name: FindBothJsonb :many
SELECT realm_sectors_jsonb_id, cells_jsonb FROM realm_sectors_jsonb
WHERE realm_sectors_jsonb_id 
IN ($1::bigint, $2::bigint)
`

type FindBothJsonbParams struct {
	RealmID1 int64 `json:"realm_id_1"`
	RealmID2 int64 `json:"realm_id_2"`
}

func (q *Queries) FindBothJsonb(ctx context.Context, arg *FindBothJsonbParams) ([]*RealmSectorsJsonb, error) {
	rows, err := q.db.QueryContext(ctx, findBothJsonb, arg.RealmID1, arg.RealmID2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*RealmSectorsJsonb{}
	for rows.Next() {
		var i RealmSectorsJsonb
		if err := rows.Scan(&i.RealmSectorsJsonbID, &i.CellsJsonb); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeSectorJsonb = `-- name: RemoveSectorJsonb :exec
UPDATE realm_sectors_jsonb
SET cells_jsonb = cells_jsonb - $1::varchar
WHERE realm_sectors_jsonb_id = $2::bigint
`

type RemoveSectorJsonbParams struct {
	Key     string `json:"key"`
	RealmID int64  `json:"realm_id"`
}

func (q *Queries) RemoveSectorJsonb(ctx context.Context, arg *RemoveSectorJsonbParams) error {
	_, err := q.db.ExecContext(ctx, removeSectorJsonb, arg.Key, arg.RealmID)
	return err
}
