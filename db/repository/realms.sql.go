// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: realms.sql

package db

import (
	"context"
	"time"

	"github.com/lib/pq"
	"github.com/sqlc-dev/pqtype"
)

const addCapital = `-- name: AddCapital :exec
UPDATE realms
SET capitals = array_append(capitals, $2::int)
WHERE realm_id = $1
`

type AddCapitalParams struct {
	RealmID int64 `json:"realm_id"`
	Capital int32 `json:"capital"`
}

func (q *Queries) AddCapital(ctx context.Context, arg *AddCapitalParams) error {
	_, err := q.db.ExecContext(ctx, addCapital, arg.RealmID, arg.Capital)
	return err
}

const createRealm = `-- name: CreateRealm :one
INSERT INTO realms (
    name,
    owner_rm_id,
    owner_nickname,
    political_entity,
    color,
    population_growth_rate,
    state_coffers,
    census_at,
    tax_collection_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING realm_id, name, owner_nickname, owner_rm_id, capitals, political_entity, color, population_growth_rate, state_coffers, census_at, tax_collection_at, created_at
`

type CreateRealmParams struct {
	Name                 string    `json:"name"`
	OwnerRmID            int64     `json:"owner_rm_id"`
	OwnerNickname        string    `json:"owner_nickname"`
	PoliticalEntity      string    `json:"political_entity"`
	Color                string    `json:"color"`
	PopulationGrowthRate float64   `json:"population_growth_rate"`
	StateCoffers         int32     `json:"state_coffers"`
	CensusAt             time.Time `json:"census_at"`
	TaxCollectionAt      time.Time `json:"tax_collection_at"`
}

func (q *Queries) CreateRealm(ctx context.Context, arg *CreateRealmParams) (*Realm, error) {
	row := q.db.QueryRowContext(ctx, createRealm,
		arg.Name,
		arg.OwnerRmID,
		arg.OwnerNickname,
		arg.PoliticalEntity,
		arg.Color,
		arg.PopulationGrowthRate,
		arg.StateCoffers,
		arg.CensusAt,
		arg.TaxCollectionAt,
	)
	var i Realm
	err := row.Scan(
		&i.RealmID,
		&i.Name,
		&i.OwnerNickname,
		&i.OwnerRmID,
		pq.Array(&i.Capitals),
		&i.PoliticalEntity,
		&i.Color,
		&i.PopulationGrowthRate,
		&i.StateCoffers,
		&i.CensusAt,
		&i.TaxCollectionAt,
		&i.CreatedAt,
	)
	return &i, err
}

const findAllRealmsWithJsonExcludeMe = `-- name: FindAllRealmsWithJsonExcludeMe :many
SELECT 
realm_id, 
name, 
owner_nickname, 
capitals, 
political_entity, 
color,
J.cells_jsonb
FROM realms AS R
LEFT JOIN realm_sectors_jsonb AS J 
ON R.realm_id = J.realm_sectors_jsonb_id
WHERE R.realm_id != $1
`

type FindAllRealmsWithJsonExcludeMeRow struct {
	RealmID         int64                 `json:"realm_id"`
	Name            string                `json:"name"`
	OwnerNickname   string                `json:"owner_nickname"`
	Capitals        []int32               `json:"capitals"`
	PoliticalEntity string                `json:"political_entity"`
	Color           string                `json:"color"`
	CellsJsonb      pqtype.NullRawMessage `json:"cells_jsonb"`
}

func (q *Queries) FindAllRealmsWithJsonExcludeMe(ctx context.Context, realmID int64) ([]*FindAllRealmsWithJsonExcludeMeRow, error) {
	rows, err := q.db.QueryContext(ctx, findAllRealmsWithJsonExcludeMe, realmID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*FindAllRealmsWithJsonExcludeMeRow{}
	for rows.Next() {
		var i FindAllRealmsWithJsonExcludeMeRow
		if err := rows.Scan(
			&i.RealmID,
			&i.Name,
			&i.OwnerNickname,
			pq.Array(&i.Capitals),
			&i.PoliticalEntity,
			&i.Color,
			&i.CellsJsonb,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findRealm = `-- name: FindRealm :one
SELECT realm_id, name, owner_nickname, owner_rm_id, capitals, political_entity, color, population_growth_rate, state_coffers, census_at, tax_collection_at, created_at FROM realms
WHERE realm_id = $1
LIMIT 1
`

func (q *Queries) FindRealm(ctx context.Context, realmID int64) (*Realm, error) {
	row := q.db.QueryRowContext(ctx, findRealm, realmID)
	var i Realm
	err := row.Scan(
		&i.RealmID,
		&i.Name,
		&i.OwnerNickname,
		&i.OwnerRmID,
		pq.Array(&i.Capitals),
		&i.PoliticalEntity,
		&i.Color,
		&i.PopulationGrowthRate,
		&i.StateCoffers,
		&i.CensusAt,
		&i.TaxCollectionAt,
		&i.CreatedAt,
	)
	return &i, err
}

const findRealmWithJson = `-- name: FindRealmWithJson :one
SELECT 
realm_id, 
name,
owner_nickname,
political_entity, 
color, 
population_growth_rate, 
state_coffers, 
census_at, 
tax_collection_at,
capitals,
J.cells_jsonb
FROM realms AS R
LEFT JOIN realm_sectors_jsonb AS J 
ON R.realm_id = J.realm_sectors_jsonb_id 
WHERE R.realm_id = $1
`

type FindRealmWithJsonRow struct {
	RealmID              int64                 `json:"realm_id"`
	Name                 string                `json:"name"`
	OwnerNickname        string                `json:"owner_nickname"`
	PoliticalEntity      string                `json:"political_entity"`
	Color                string                `json:"color"`
	PopulationGrowthRate float64               `json:"population_growth_rate"`
	StateCoffers         int32                 `json:"state_coffers"`
	CensusAt             time.Time             `json:"census_at"`
	TaxCollectionAt      time.Time             `json:"tax_collection_at"`
	Capitals             []int32               `json:"capitals"`
	CellsJsonb           pqtype.NullRawMessage `json:"cells_jsonb"`
}

func (q *Queries) FindRealmWithJson(ctx context.Context, realmID int64) (*FindRealmWithJsonRow, error) {
	row := q.db.QueryRowContext(ctx, findRealmWithJson, realmID)
	var i FindRealmWithJsonRow
	err := row.Scan(
		&i.RealmID,
		&i.Name,
		&i.OwnerNickname,
		&i.PoliticalEntity,
		&i.Color,
		&i.PopulationGrowthRate,
		&i.StateCoffers,
		&i.CensusAt,
		&i.TaxCollectionAt,
		pq.Array(&i.Capitals),
		&i.CellsJsonb,
	)
	return &i, err
}

const getCensusAndPopulationGrowthRate = `-- name: GetCensusAndPopulationGrowthRate :one
SELECT census_at, population_growth_rate FROM realms
WHERE realm_id = $1
`

type GetCensusAndPopulationGrowthRateRow struct {
	CensusAt             time.Time `json:"census_at"`
	PopulationGrowthRate float64   `json:"population_growth_rate"`
}

func (q *Queries) GetCensusAndPopulationGrowthRate(ctx context.Context, realmID int64) (*GetCensusAndPopulationGrowthRateRow, error) {
	row := q.db.QueryRowContext(ctx, getCensusAndPopulationGrowthRate, realmID)
	var i GetCensusAndPopulationGrowthRateRow
	err := row.Scan(&i.CensusAt, &i.PopulationGrowthRate)
	return &i, err
}

const getRealmOwnerRmId = `-- name: GetRealmOwnerRmId :one
SELECT owner_rm_id FROM realms
WHERE realm_id = $1 LIMIT 1
`

func (q *Queries) GetRealmOwnerRmId(ctx context.Context, realmID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getRealmOwnerRmId, realmID)
	var owner_rm_id int64
	err := row.Scan(&owner_rm_id)
	return owner_rm_id, err
}

const removeCapital = `-- name: RemoveCapital :exec
UPDATE realms
SET capitals = array_remove(capitals, $1::int)
WHERE realm_id = $2::bigint
`

type RemoveCapitalParams struct {
	RemoveCapital int32 `json:"remove_capital"`
	RealmID       int64 `json:"realm_id"`
}

func (q *Queries) RemoveCapital(ctx context.Context, arg *RemoveCapitalParams) error {
	_, err := q.db.ExecContext(ctx, removeCapital, arg.RemoveCapital, arg.RealmID)
	return err
}

const removeRealm = `-- name: RemoveRealm :exec
DELETE FROM realms
WHERE realm_id = $1
`

func (q *Queries) RemoveRealm(ctx context.Context, realmID int64) error {
	_, err := q.db.ExecContext(ctx, removeRealm, realmID)
	return err
}

const transferStateCoffers = `-- name: TransferStateCoffers :one
WITH deducted AS (
    UPDATE realms
    SET state_coffers = FLOOR(state_coffers * (1 - $2::float))::int
    WHERE realm_id = $3::bigint
    RETURNING FLOOR(state_coffers / $2::float)::int - state_coffers AS delta, state_coffers AS source_state_coffers
)
UPDATE realms
SET state_coffers = state_coffers + deducted.delta
FROM deducted
WHERE realm_id = $1::bigint
RETURNING deducted.delta, deducted.source_state_coffers, state_coffers AS receiver_state_coffers
`

type TransferStateCoffersParams struct {
	ReceiverRealmID int64   `json:"receiver_realm_id"`
	ReductionRate   float64 `json:"reduction_rate"`
	SourceRealmID   int64   `json:"source_realm_id"`
}

type TransferStateCoffersRow struct {
	Delta                int32 `json:"delta"`
	SourceStateCoffers   int32 `json:"source_state_coffers"`
	ReceiverStateCoffers int32 `json:"receiver_state_coffers"`
}

func (q *Queries) TransferStateCoffers(ctx context.Context, arg *TransferStateCoffersParams) (*TransferStateCoffersRow, error) {
	row := q.db.QueryRowContext(ctx, transferStateCoffers, arg.ReceiverRealmID, arg.ReductionRate, arg.SourceRealmID)
	var i TransferStateCoffersRow
	err := row.Scan(&i.Delta, &i.SourceStateCoffers, &i.ReceiverStateCoffers)
	return &i, err
}

const updateCensusAt = `-- name: UpdateCensusAt :exec
UPDATE realms
SET census_at = $2
WHERE realm_id = $1
`

type UpdateCensusAtParams struct {
	RealmID  int64     `json:"realm_id"`
	CensusAt time.Time `json:"census_at"`
}

func (q *Queries) UpdateCensusAt(ctx context.Context, arg *UpdateCensusAtParams) error {
	_, err := q.db.ExecContext(ctx, updateCensusAt, arg.RealmID, arg.CensusAt)
	return err
}

const updateRealmPoliticalEntityAndRemoveCapital = `-- name: UpdateRealmPoliticalEntityAndRemoveCapital :exec
UPDATE realms
SET political_entity = $1::varchar,
capitals = array_remove(capitals, $2::int),
population_growth_rate = $3::float
WHERE realm_id = $4::bigint
`

type UpdateRealmPoliticalEntityAndRemoveCapitalParams struct {
	PoliticalEntity      string  `json:"political_entity"`
	RemoveCapital        int32   `json:"remove_capital"`
	PopulationGrowthRate float64 `json:"population_growth_rate"`
	RealmID              int64   `json:"realm_id"`
}

func (q *Queries) UpdateRealmPoliticalEntityAndRemoveCapital(ctx context.Context, arg *UpdateRealmPoliticalEntityAndRemoveCapitalParams) error {
	_, err := q.db.ExecContext(ctx, updateRealmPoliticalEntityAndRemoveCapital,
		arg.PoliticalEntity,
		arg.RemoveCapital,
		arg.PopulationGrowthRate,
		arg.RealmID,
	)
	return err
}

const updateStateCoffers = `-- name: UpdateStateCoffers :one
UPDATE realms
SET state_coffers = state_coffers - $1
WHERE realm_id = $2 AND state_coffers >= $1
RETURNING state_coffers
`

type UpdateStateCoffersParams struct {
	Deduction int32 `json:"deduction"`
	RealmID   int64 `json:"realm_id"`
}

func (q *Queries) UpdateStateCoffers(ctx context.Context, arg *UpdateStateCoffersParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, updateStateCoffers, arg.Deduction, arg.RealmID)
	var state_coffers int32
	err := row.Scan(&state_coffers)
	return state_coffers, err
}
