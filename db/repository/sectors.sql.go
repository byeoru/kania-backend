// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sectors.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createSector = `-- name: CreateSector :exec
INSERT INTO sectors (
    cell_number,
    province_number,
    realm_id,
    population
) VALUES (
    $1, $2, $3, $4
)
`

type CreateSectorParams struct {
	CellNumber     int32 `json:"cell_number"`
	ProvinceNumber int32 `json:"province_number"`
	RealmID        int64 `json:"realm_id"`
	Population     int32 `json:"population"`
}

func (q *Queries) CreateSector(ctx context.Context, arg *CreateSectorParams) error {
	_, err := q.db.ExecContext(ctx, createSector,
		arg.CellNumber,
		arg.ProvinceNumber,
		arg.RealmID,
		arg.Population,
	)
	return err
}

const findSectorRealmForUpdate = `-- name: FindSectorRealmForUpdate :one
SELECT s.cell_number, s.province_number, s.realm_id, s.population, s.created_at, r.realm_id, r.name, r.owner_nickname, r.owner_id, r.capitals, r.political_entity, r.color, r.population_growth_rate, r.state_coffers, r.census_at, r.tax_collection_at, r.created_at FROM sectors AS S
INNER JOIN realms AS R
ON S.realm_id = R.realm_id
WHERE cell_number = $1
LIMIT 1 FOR UPDATE
`

type FindSectorRealmForUpdateRow struct {
	Sector Sector `json:"sector"`
	Realm  Realm  `json:"realm"`
}

func (q *Queries) FindSectorRealmForUpdate(ctx context.Context, cellNumber int32) (*FindSectorRealmForUpdateRow, error) {
	row := q.db.QueryRowContext(ctx, findSectorRealmForUpdate, cellNumber)
	var i FindSectorRealmForUpdateRow
	err := row.Scan(
		&i.Sector.CellNumber,
		&i.Sector.ProvinceNumber,
		&i.Sector.RealmID,
		&i.Sector.Population,
		&i.Sector.CreatedAt,
		&i.Realm.RealmID,
		&i.Realm.Name,
		&i.Realm.OwnerNickname,
		&i.Realm.OwnerID,
		pq.Array(&i.Realm.Capitals),
		&i.Realm.PoliticalEntity,
		&i.Realm.Color,
		&i.Realm.PopulationGrowthRate,
		&i.Realm.StateCoffers,
		&i.Realm.CensusAt,
		&i.Realm.TaxCollectionAt,
		&i.Realm.CreatedAt,
	)
	return &i, err
}

const getNumberOfRealmSectors = `-- name: GetNumberOfRealmSectors :one
SELECT COUNT(S) AS sector_count FROM sectors AS S
WHERE S.realm_id = $1
LIMIT 1
`

func (q *Queries) GetNumberOfRealmSectors(ctx context.Context, realmID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNumberOfRealmSectors, realmID)
	var sector_count int64
	err := row.Scan(&sector_count)
	return sector_count, err
}

const getPopulation = `-- name: GetPopulation :one
SELECT population, realm_id FROM sectors
WHERE cell_number = $1 LIMIT 1
`

type GetPopulationRow struct {
	Population int32 `json:"population"`
	RealmID    int64 `json:"realm_id"`
}

func (q *Queries) GetPopulation(ctx context.Context, cellNumber int32) (*GetPopulationRow, error) {
	row := q.db.QueryRowContext(ctx, getPopulation, cellNumber)
	var i GetPopulationRow
	err := row.Scan(&i.Population, &i.RealmID)
	return &i, err
}

const getSectorRealmId = `-- name: GetSectorRealmId :one
SELECT realm_id FROM sectors
WHERE cell_number = $1 LIMIT 1
`

func (q *Queries) GetSectorRealmId(ctx context.Context, cellNumber int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSectorRealmId, cellNumber)
	var realm_id int64
	err := row.Scan(&realm_id)
	return realm_id, err
}

const getSectorRealmIdForUpdate = `-- name: GetSectorRealmIdForUpdate :one
SELECT realm_id FROM sectors
WHERE cell_number = $1 LIMIT 1
FOR UPDATE
`

func (q *Queries) GetSectorRealmIdForUpdate(ctx context.Context, cellNumber int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSectorRealmIdForUpdate, cellNumber)
	var realm_id int64
	err := row.Scan(&realm_id)
	return realm_id, err
}

const transferSectorOwnershipToAttackers = `-- name: TransferSectorOwnershipToAttackers :exec
UPDATE sectors
SET realm_id = $1::bigint
WHERE cell_number IN (
    SELECT sectors.cell_number
    FROM sectors
    LEFT JOIN levies
    ON sectors.cell_number = levies.encampment
    WHERE sectors.realm_id = $2::bigint
    GROUP BY sectors.cell_number
    HAVING COUNT(levies.encampment) = 0
)
`

type TransferSectorOwnershipToAttackersParams struct {
	AttackerRealmID int64 `json:"attacker_realm_id"`
	DefenderRealmID int64 `json:"defender_realm_id"`
}

func (q *Queries) TransferSectorOwnershipToAttackers(ctx context.Context, arg *TransferSectorOwnershipToAttackersParams) error {
	_, err := q.db.ExecContext(ctx, transferSectorOwnershipToAttackers, arg.AttackerRealmID, arg.DefenderRealmID)
	return err
}

const updateCensusPopulation = `-- name: UpdateCensusPopulation :exec
UPDATE sectors 
SET population = CEIL(population * POW(1 + $1::float, $2::float / 365.25))
WHERE realm_id = $3::bigint
`

type UpdateCensusPopulationParams struct {
	RateOfIncrease float64 `json:"rate_of_increase"`
	DurationDay    float64 `json:"duration_day"`
	RealmID        int64   `json:"realm_id"`
}

func (q *Queries) UpdateCensusPopulation(ctx context.Context, arg *UpdateCensusPopulationParams) error {
	_, err := q.db.ExecContext(ctx, updateCensusPopulation, arg.RateOfIncrease, arg.DurationDay, arg.RealmID)
	return err
}

const updatePopulation = `-- name: UpdatePopulation :one
UPDATE sectors
SET population = population - $1::int
WHERE cell_number = $2::int AND population >= $1::int
RETURNING population
`

type UpdatePopulationParams struct {
	Deduction  int32 `json:"deduction"`
	Cellnumber int32 `json:"cellnumber"`
}

func (q *Queries) UpdatePopulation(ctx context.Context, arg *UpdatePopulationParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, updatePopulation, arg.Deduction, arg.Cellnumber)
	var population int32
	err := row.Scan(&population)
	return population, err
}

const updateSectorOwnership = `-- name: UpdateSectorOwnership :exec
UPDATE sectors
SET realm_id = $2
WHERE cell_number = $1
`

type UpdateSectorOwnershipParams struct {
	CellNumber int32 `json:"cell_number"`
	RealmID    int64 `json:"realm_id"`
}

func (q *Queries) UpdateSectorOwnership(ctx context.Context, arg *UpdateSectorOwnershipParams) error {
	_, err := q.db.ExecContext(ctx, updateSectorOwnership, arg.CellNumber, arg.RealmID)
	return err
}

const updateSectorToIndigenous = `-- name: UpdateSectorToIndigenous :exec
DELETE FROM sectors
WHERE cell_number IN (
    SELECT sectors.cell_number
    FROM sectors
    LEFT JOIN levies
    ON sectors.cell_number = levies.encampment
    WHERE sectors.realm_id = $1
    GROUP BY sectors.cell_number
    HAVING COUNT(levies.encampment) = 0
)
`

func (q *Queries) UpdateSectorToIndigenous(ctx context.Context, realmID int64) error {
	_, err := q.db.ExecContext(ctx, updateSectorToIndigenous, realmID)
	return err
}
