// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sectors.sql

package db

import (
	"context"
)

const createSector = `-- name: CreateSector :exec
INSERT INTO sectors (
    cell_number,
    province_number,
    realm_id,
    population
) VALUES (
    $1, $2, $3, $4
)
`

type CreateSectorParams struct {
	CellNumber     int32 `json:"cell_number"`
	ProvinceNumber int32 `json:"province_number"`
	RealmID        int64 `json:"realm_id"`
	Population     int32 `json:"population"`
}

func (q *Queries) CreateSector(ctx context.Context, arg *CreateSectorParams) error {
	_, err := q.db.ExecContext(ctx, createSector,
		arg.CellNumber,
		arg.ProvinceNumber,
		arg.RealmID,
		arg.Population,
	)
	return err
}

const getPopulation = `-- name: GetPopulation :one
SELECT population, realm_id FROM sectors
WHERE cell_number = $1 LIMIT 1
`

type GetPopulationRow struct {
	Population int32 `json:"population"`
	RealmID    int64 `json:"realm_id"`
}

func (q *Queries) GetPopulation(ctx context.Context, cellNumber int32) (*GetPopulationRow, error) {
	row := q.db.QueryRowContext(ctx, getPopulation, cellNumber)
	var i GetPopulationRow
	err := row.Scan(&i.Population, &i.RealmID)
	return &i, err
}

const updatePopulation = `-- name: UpdatePopulation :exec
UPDATE sectors 
SET population = CEIL(population * POW(1 + $1::float, $2::float / 365.25))
WHERE realm_id = $3::bigint
`

type UpdatePopulationParams struct {
	RateOfIncrease float64 `json:"rate_of_increase"`
	DurationDay    float64 `json:"duration_day"`
	RealmID        int64   `json:"realm_id"`
}

func (q *Queries) UpdatePopulation(ctx context.Context, arg *UpdatePopulationParams) error {
	_, err := q.db.ExecContext(ctx, updatePopulation, arg.RateOfIncrease, arg.DurationDay, arg.RealmID)
	return err
}
