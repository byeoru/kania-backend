// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    email,
    hashed_password,
    nickname
) VALUES (
    $1, $2, $3
)
`

type CreateUserParams struct {
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
	Nickname       string `json:"nickname"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Email, arg.HashedPassword, arg.Nickname)
	return err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email, hashed_password, nickname, created_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.Nickname,
		&i.CreatedAt,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one
SELECT id, email, hashed_password, nickname, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.Nickname,
		&i.CreatedAt,
	)
	return i, err
}
