// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    hashed_password,
    nickname
) VALUES (
    $1, $2, $3
) RETURNING user_id
`

type CreateUserParams struct {
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
	Nickname       string `json:"nickname"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword, arg.Nickname)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT user_id, email, hashed_password, nickname, created_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.HashedPassword,
		&i.Nickname,
		&i.CreatedAt,
	)
	return &i, err
}

const findUserById = `-- name: FindUserById :one
SELECT user_id, email, hashed_password, nickname, created_at FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) FindUserById(ctx context.Context, userID int64) (*User, error) {
	row := q.db.QueryRowContext(ctx, findUserById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.HashedPassword,
		&i.Nickname,
		&i.CreatedAt,
	)
	return &i, err
}
