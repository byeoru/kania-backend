// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: world_time_records.sql

package db

import (
	"context"
	"time"
)

const createWorldTimeRecord = `-- name: CreateWorldTimeRecord :exec
INSERT INTO world_time_records (
    stop_reason,
    world_stopped_at
) VALUES (
    $1, $2
)
`

type CreateWorldTimeRecordParams struct {
	StopReason     string    `json:"stop_reason"`
	WorldStoppedAt time.Time `json:"world_stopped_at"`
}

func (q *Queries) CreateWorldTimeRecord(ctx context.Context, arg *CreateWorldTimeRecordParams) error {
	_, err := q.db.ExecContext(ctx, createWorldTimeRecord, arg.StopReason, arg.WorldStoppedAt)
	return err
}

const findLatestWorldTimeRecord = `-- name: FindLatestWorldTimeRecord :one
SELECT world_time_record_id, stop_reason, world_stopped_at, created_at FROM world_time_records
ORDER BY world_time_record_id DESC LIMIT 1
`

func (q *Queries) FindLatestWorldTimeRecord(ctx context.Context) (*WorldTimeRecord, error) {
	row := q.db.QueryRowContext(ctx, findLatestWorldTimeRecord)
	var i WorldTimeRecord
	err := row.Scan(
		&i.WorldTimeRecordID,
		&i.StopReason,
		&i.WorldStoppedAt,
		&i.CreatedAt,
	)
	return &i, err
}
